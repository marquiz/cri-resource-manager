#!/bin/bash -e

this=`basename $0`

usage () {
cat << EOF
Usage: $this [-h] [-a] SITE_DIR

Optional arguments:
  -h        show this help and exit
  -a        amend (with --reset-author) instead of creating a new commit
EOF
}

while getopts "ha" opt; do
    case $opt in
        h)  usage
            exit 0
            ;;
        a)  amend=1
            ;;
        *)  usage
            exit 1
            ;;
    esac
done

# Get positional argument(s)
shift "$((OPTIND - 1))"

sitedir=$1

# Create temporary index file for git and remove it on exit
export GIT_INDEX_FILE=`pwd`/git-tmp-index.cri-resmgr.`date +%s`
trap "rm -f '$GIT_INDEX_FILE'" EXIT


# Create a git tree object of the content
git --work-tree "$sitedir" add .

git_tree_obj=`git write-tree`


# Don't create empty commits
old_tree_obj=`git rev-parse --verify gh-pages^{tree}`

if [ "$git_tree_obj" = "$old_tree_obj" ]; then
    echo "nothing to commit, gh-pages branch already up-to-date"
    exit 0
fi


# Create a new commit
parent_commit=gh-pages
if [ -n "$amend" ]; then
    # Re-use old commit message and parent
    commit_msg=`git show --format=%B --no-patch gh-pages`
    parent_commit="$parent_commit^"
else
    commit_msg=`echo -e "Update documentation\n\nAuto-generated by '$this'"`
fi
parent_commit=`git rev-parse --verify $parent_commit 2>/dev/null || :`

git_commit_obj=`git commit-tree ${parent_commit:+-p $parent_commit} -m "$commit_msg" $git_tree_obj`


# Update gh-pages branch
git update-ref refs/heads/gh-pages $git_commit_obj

echo "gh-pages branch successfully updated"
